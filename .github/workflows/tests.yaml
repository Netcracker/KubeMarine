name: Tests and Validations
on:
  push:
    branches:
      - '**'
env:
   COPYRIGHT_COMPANY: 'NetCracker Technology Corporation'
   COPYRIGHT_YEAR: '2021-2023'
jobs:
  license:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v3
       - run: docker run -v "${PWD}:/src" -i ghcr.io/google/addlicense -v -c "${{ env.COPYRIGHT_COMPANY }}" -y "${{ env.COPYRIGHT_YEAR }}" $(find . -type f -name "*.py" | xargs echo)
       # This currently not works for protected branches,
       # but all pushes to them should be done through PRs that already contain inserted license.
       - uses: stefanzweifel/git-auto-commit-action@v4
         with:
           commit_message: Auto-update license header
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: docker build -t kubemarine --build-arg BUILD_TYPE=test --no-cache .
      - run: docker run --entrypoint=python3 kubemarine -m unittest discover -s /opt/kubemarine/test/unit -t /opt/kubemarine/test/unit
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      # Install coverage and kubemarine with all dependencies except ansible.
      # Then uninstall only kubemarine to avoid ambiguity and to surely run coverage on sources.
      - run: pip install coverage . && pip uninstall -y kubemarine
      - run: coverage run -m unittest discover -s test/unit -t test/unit; coverage report -m
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      # Install pylint and kubemarine with all dependencies except ansible.
      # Then uninstall only kubemarine to avoid ambiguity and to surely run pylint on sources.
      - run: pip install pylint . && pip uninstall -y kubemarine
      - run: pylint kubemarine test --disable fixme || exit 0
  radon:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - run: pip install radon xenon
        # Use `radon cc {paths} -a` locally for full report per function
        # xenon checks, if radon absolute result is A
      - run: |
          radon cc kubemarine scripts -a
          xenon -a A kubemarine scripts
