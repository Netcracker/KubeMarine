name: Make Release and/or Publish Artifacts

on:
  push:
    branches:
      - 'main'
    tags:
      - '*'

jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Check Versions Consistency
        if: startsWith(github.ref, 'refs/tags')
        run: |
          VERSION=$(cat kubemarine/version)
          if [[ $VERSION != "${{ github.ref_name }}" ]]; then
            echo -e "\033[91mGit tag does not equal to kubemarine/version\033[0m"
            exit 1;
          fi

  build-package:
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Build Package via Docker
        run: |
          docker build -t kubemarine --build-arg BUILD_TYPE=package --no-cache .
          CONTAINER_ID=$(docker create kubemarine)
          docker cp "${CONTAINER_ID}:/opt/kubemarine/dist" dist
          docker rm -v "${CONTAINER_ID}"
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist

  create-release:
    runs-on: ubuntu-latest
    needs: build-package
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Validate and Prepare
        id: prepare
        run: |
          BRANCH_OWNERS=$(git branch -r --contains HEAD | sed 's/^[[:space:]]*origin\/\(.*\)$/\1/' | grep "^\(main\|.*_branch\)$")
          if [[ -z "$BRANCH_OWNERS" || $(echo "$BRANCH_OWNERS" | wc -l) != 1 ]]; then
            echo -e "\033[91mFailed to detect the only release branch containing the HEAD commit.\033[0m";
            echo "Available branches:"
            git branch -r --contains HEAD
            exit 1;
          fi
          echo -e "\033[0;32mTarget commitish: ${BRANCH_OWNERS}\033[0m"
          echo "target_commitish=$BRANCH_OWNERS" >> $GITHUB_OUTPUT

      - name: Download Package
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./dist
      - name: Pack Package
        run: zip -r package.zip dist

      - name: Build Binary via Docker
        run: |
          docker build -t kubemarine --build-arg BUILD_TYPE=binary --no-cache .
          CONTAINER_ID=$(docker create kubemarine)
          docker cp "${CONTAINER_ID}:/opt/kubemarine/dist/kubemarine" dist/kubemarine
          docker rm -v "${CONTAINER_ID}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: true
          generate_release_notes: true
          # The value is necessary to manage the branch after release is released.
          # See patch.yaml workflow.
          target_commitish: ${{ steps.prepare.outputs.target_commitish }}
          files: |
            package.zip
            dist/kubemarine

#      - name: PyInstaller win64
#        id: win64
#        uses: action-python/pyinstaller-py3.8@win64
#        with:
#          path: ./
#          requirements: "./requirements_nt.txt"
#      - name: PyInstaller amd64
#        id: amd64
#        uses: action-python/pyinstaller-py3.8@amd64
#        with:
#          path: ./
#          requirements: "./requirements.txt"
#      - name: Upload Release Asset amd64
#        id: upload-release-asset-amd64
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#            upload_url: ${{ github.event.release.upload_url }}
#            asset_path: ${{ steps.amd64.outputs.location }}
#            asset_name: ${{ steps.amd64.outputs.filename }}
#            asset_content_type: ${{ steps.amd64.outputs.content_type }}
#      - name: Upload Release Asset win64
#        id: upload-release-asset-win64
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: ${{ steps.win64.outputs.location }}
#          asset_name: ${{ steps.win64.outputs.filename }}
#          asset_content_type: ${{ steps.win64.outputs.content_type }}

  test-package:
    runs-on: ${{ matrix.os }}
    needs: build-package
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
        include:
          - wheel: 'dist/*.whl'
            remove_files_script: 'find . -not -path "./test*" -not -path "./examples*" -delete'
          - os: windows-latest
            wheel: '(get-item dist\*.whl).FullName'
            remove_files_script: 'Get-ChildItem -Exclude test,examples | Remove-Item -Recurse -Force'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Keep Testing Files
        run: ${{ matrix.remove_files_script }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download Package
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./dist
      - name: Install Package
        run: python -m pip install ${{ matrix.wheel }}
      - name: Enable UTF-8 on Windows
        run: echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
        if: runner.os == 'Windows'
      - name: Run Tests
        run: python -m unittest discover -s test/unit -t test/unit

  publish-docker:
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - uses: actions/checkout@v2
      - run: docker build . -t ghcr.io/netcracker/kubemarine:${{ github.ref_name }}
      - run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://ghcr.io -u ${GITHUB_ACTOR} --password-stdin
      - run: docker push ghcr.io/netcracker/kubemarine:${{ github.ref_name }}
