{
  "$schema": "http://json-schema.org/draft-07/schema",
  "type": "object",
  "description": "Configure the Coredns service and its DNS rules in the Kubernetes cluster",
  "properties": {
    "add_etc_hosts_generated": {
      "type": "boolean",
      "default": true,
      "description": "Enables to add autogenerated records about cluster nodes to Hosts part of coredns configmap"
    },
    "configmap": {
      "type": "object",
      "description": "Configmap parameters that are applied to the Coredns service",
      "properties": {
        "Corefile": {
          "type": "object",
          "description": "The main Coredns config, which is converted into a template in accordance with the specified parameters",
          "properties": {
            ".:53": {
              "$ref": "#/definitions/DefaultSettings"
            }
          },
          "additionalProperties": {
            "type": "object"
          }
        },
        "Hosts": {
          "type": "string",
          "description": "Hosts file obtained in accordance with etc_hosts inventory parameter. The contents of this file are automatically added to the inventory, if not specified manually"
        }
      },
      "additionalProperties": {
        "type": "string"
      }
    },
    "deployment": {
      "type": "object",
      "description": "YAML settings that are applied to Coredns service via a patch",
      "properties": {
        "spec": {
          "type": "object",
          "properties": {
            "template": {
              "type": "object",
              "properties": {
                "spec": {
                  "type": "object",
                  "properties": {
                    "volumes": {"$ref": "../common/utils.json#/definitions/MergeableArrayOfObjects"},
                    "nodeSelector": {"type": "object"},
                    "affinity": {"type": "object"}
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "DefaultSettings": {
      "type": "object",
      "description": "Default destination",
      "properties": {
        "errors": {
          "type": "boolean",
          "default": true,
          "description": "Any errors encountered during the query processing are printed to standard output. The errors of a particular type can be consolidated and printed once per a period of time."
        },
        "health": {
          "type": "boolean",
          "default": true,
          "description": "Enabled process wide health endpoint. When CoreDNS is up and running, this returns a 200 OK HTTP status code. The health is exported, by default, on port 8080/health"
        },
        "ready": {
          "type": "boolean",
          "default": true,
          "description": "By enabling ready, an HTTP endpoint on port 8181 returns 200 OK when all plugins that are able to signal readiness have done so. If some are not ready, the endpoint still returns a 503 with the body containing the list of plugins that are not ready. Once a plugin has signaled that it is ready, it is not queried again."
        },
        "prometheus": {
          "description": "With Prometheus, you export metrics from the CoreDNS and any plugin that has them. The metrics path is fixed to /metrics",
          "oneOf": [
            {"$ref": "#/definitions/DisableSetting"},
            {
              "type": "string",
              "default": ":9153"
            }
          ]
        },
        "cache": {
          "description": "With cache enabled, all records except zone transfers and metadata records are cached according to the ttl value set",
          "oneOf": [
            {"$ref": "#/definitions/DisableSetting"},
            {
              "type": "integer",
              "default": 30
            }
          ]
        },
        "loop": {
          "type": "boolean",
          "default": true,
          "description": "The loop plugin sends a random probe query and keeps a track of how many it is viewed. If it is viewed more than twice, assume that CoreDNS has seen a forwarding loop and halt the process."
        },
        "reload": {
          "type": "boolean",
          "default": true,
          "description": "This plugin allows automatic reload of a changed Corefile"
        },
        "loadbalance": {
          "type": "boolean",
          "default": true,
          "description": "The loadbalance acts as a round-robin DNS load balancer by randomizing the order of A, AAAA, and MX records in the answer"
        },
        "forward": {
          "description": "The forward plugin re-uses already opened sockets to the upstreams. It supports UDP, TCP, and DNS-over-TLS. It is used in band health checking.",
          "oneOf": [
            {"$ref": "#/definitions/DisableSetting"},
            {"$ref": "../common/utils.json#/definitions/NonEmptyArrayOfStrings"}
          ]
        },
        "rewrite": {
          "$ref": "#/definitions/CustomPlugin",
          "description": "The rewrite could be used for rewriting different parts of DNS questions and answers. By default, it is not used, but it is required to use rewrite plugin in DR schema."
        },
        "hosts": {
          "description": "The hosts plugin is useful for serving zones from a /etc/hosts like file. It serves from a preloaded file, which is applied from ConfigMap during the installation.",
          "oneOf": [
            {"$ref": "#/definitions/DisableSetting"},
            {
              "type": "object",
              "properties": {
                "default": {"$ref": "#/definitions/HostsPluginSection"}
              },
              "additionalProperties": {"$ref": "#/definitions/HostsPluginSection"}
            }
          ]
        },
        "kubernetes": {
          "description": "This plugin implements the Kubernetes DNS-Based Service Discovery Specification",
          "oneOf": [
            {"$ref": "#/definitions/DisableSetting"},
            {
              "type": "object",
              "properties": {
                "default": {"$ref": "#/definitions/KubernetesPluginSection"}
              },
              "additionalProperties": {"$ref": "#/definitions/KubernetesPluginSection"}
            }
          ]
        },
        "template": {
          "description": "The template plugin allows you to dynamically respond to queries by just writing a template",
          "oneOf": [
            {"$ref": "#/definitions/DisableSetting"},
            {
              "type": "object",
              "properties": {
                "default": {"$ref": "#/definitions/TemplatePluginSection"},
                "reject-aaaa": {"$ref": "#/definitions/TemplatePluginSection"}
              },
              "additionalProperties": {"$ref": "#/definitions/TemplatePluginSection"}
            }
          ]
        }
      },
      "additionalProperties": {
        "oneOf": [
          {"type": ["string", "integer", "boolean"]},
          {"$ref": "#/definitions/CustomPlugin"}
        ]
      }
    },
    "DisableSetting": {
      "type": "boolean",
      "enum": [false, "False"]
    },
    "CustomPlugin": {
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "allOf": [{"$ref": "#/definitions/GenericPluginSection"}],
        "required": ["data"],
        "propertyNames": {
          "$ref": "#/definitions/GenericPluginSectionPropertyNames"
        }
      }
    },
    "HostsPluginSection": {
      "type": "object",
      "allOf": [{"$ref": "#/definitions/GenericPluginSection"}],
      "properties": {
        "file": {"type": "string", "default": "/etc/coredns/Hosts"}
      },
      "propertyNames": {
        "anyOf": [
          {"$ref": "#/definitions/GenericPluginSectionPropertyNames"},
          {"enum": ["file"]}
        ]
      }
    },
    "KubernetesPluginSection": {
      "type": "object",
      "allOf": [{"$ref": "#/definitions/GenericPluginSection"}],
      "properties": {
        "zone": {
          "oneOf": [
            {"type": "string"},
            {"$ref": "../common/utils.json#/definitions/NonEmptyArrayOfStrings"}
          ]
        }
      },
      "propertyNames": {
        "anyOf": [
          {"$ref": "#/definitions/GenericPluginSectionPropertyNames"},
          {"enum": ["zone"]}
        ]
      }
    },
    "TemplatePluginSection": {
      "type": "object",
      "allOf": [{"$ref": "#/definitions/GenericPluginSection"}],
      "properties": {
        "zone": {
          "oneOf": [
            {"type": "string"},
            {"$ref": "../common/utils.json#/definitions/NonEmptyArrayOfStrings"}
          ]
        },
        "class": {"type": "string"},
        "type": {"type": "string"}
      },
      "propertyNames": {
        "anyOf": [
          {"$ref": "#/definitions/GenericPluginSectionPropertyNames"},
          {"enum": ["zone", "class", "type"]}
        ]
      }
    },
    "GenericPluginSection": {
      "properties": {
        "priority": {
          "type": "integer",
          "description": "Defines an order in which the section will appear in the generated ConfigMap. If omitted, the section will be placed after all other sections with the defined priority"
        },
        "enabled": {
          "type": ["string", "boolean", "integer"],
          "default": true,
          "description": "The section is added to the generated ConfigMap only if it has positive 'enabled' value"
        },
        "data": {
          "type": "object"
        }
      }
    },
    "GenericPluginSectionPropertyNames": {
      "enum": ["priority", "enabled", "data"]
    }
  }
}
